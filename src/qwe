ref, watch등 부여하기전
<template>
  <div class="main" id="app">
    <div class="change-day">
      <button @click="changeDate('yesterday')">&lt;</button>
      <div>{{state.startDate}}</div>
      <button @click="changeDate('tomorrow')">&gt;</button>
      <div>
          <input type="radio" id="contactChoice1" value="day" v-model="sortType"  checked="checked" >
          <label for="contactChoice1">일일</label>
          <input type="radio" id="contactChoice2" value="week" v-model="sortType" >
          <label for="contactChoice2">주간</label>
          <input type="radio" id="contactChoice3" value="month" v-model="sortType" >
          <label for="contactChoice3">월간</label>
          {{state.startDate}}
          {{sortType}}
      </div>
    </div>
    <div>
      <h1>chart of local new confirmed person</h1>
      <canvas id="corona-chart"></canvas>
    </div>
    <table>
      <thead>
        <th v-for="col in state.columns" :key="col.key">{{col.text}}</th>
      </thead>
      <tbody>
        <tr v-for="item in state.items" :key="item.gubun">
          <td>{{item.gubun}}</td>
          <td>{{item.localOccCnt}}</td>
          <td>{{item.deathCnt}}</td>
          <td>{{item.incDec}}</td>
          <td>{{item.isolIngCnt}}</td>
        </tr>
      </tbody> 
    </table>
  </div>
</template>

<script>
import API from './assets/scripts/api';
import { reactive, onMounted, computed, onBeforeUpdate, onUpdated, ref } from 'vue';
import moment from 'moment';
import coronaData from './components/CoronaData.js';
import Chart from 'chart.js';
export default {
  name: 'App',
  setup(){
    const sortType = ref("");
    
    const state = reactive({  
      items: [],
      columns: [
        {
          key: 'gubun',
          text: '지역'
        },
        {
          key: 'localOccCnt',
          text: '신규확진자'
        },
        {
          key: 'deathCnt',
          text: '사망자'
        },
        {
          key: 'incDec',
          text: '전일대비증감'
        },
        {
          key: 'isolIngCnt',
          text: '격리중인환자수'
        }
      ],
      coronaData: {}, 
      endDate: moment().format('YYYYMMDD'),
      // sortType: 'day',
      changeDay: 0,
      startDate: computed(() => {
         if(state.sortType === 'day'){
          return state.endDate;
        }else if(state.sortType === 'week'){
          console.log(state.sortType);
          let test = 0; 
          let a = moment();
          while(a.clone().subtract(test, 'days').format('dddd') !== 'Monday'){
              test += 1;
            }
          return a.subtract(test, 'days').format('YYYYMMDD');
        }else{
          console.log(state.sortType)
          return moment().clone().startOf('month').format('YYYYMMDD');
        }
      })
    })
    onMounted(() => {
      fetchData();
    })
    onBeforeUpdate(() => {
      createChart('corona-chart', state.coronaData);
    })
    onUpdated(() => {
      // fetchData();
    })
    let response = null;
    const fetchData = async () =>{ 
      response = await API.fetchAPI(state.startDate, state.endDate);
      state.items = response.data.response.body.items.item;
      coronaData.data.labels = state.items.map(data => data.gubun);
      coronaData.data.datasets[0].data = state.items.map(data => data.localOccCnt);
      state.coronaData = coronaData;
    }
    const createChart = (chartId, chartData) => {
      const ctx = document.getElementById(chartId);
      new Chart(ctx, {
        type: chartData.type,
        data: chartData.data,
        options: chartData.options,
      });
    }
    const changeDate = (check) => {
      if(check === 'yesterday'){
        state.changeDay -= 1;
        state.endDate = moment().add(state.changeDay, 'days').format('YYYYMMDD');
        fetchData();
      }else{
        state.changeDay += 1;
        state.endDate = moment().add(state.changeDay, 'days').format('YYYYMMDD');
        fetchData();
      }
    }

    return {
      sortType,
      state,
      fetchData,
      createChart,
      changeDate,
      // changeType
    }
  }
};
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
.main{
  display: flex;
  flex-direction: column;
  align-items: center;
}
.change-day{
  display: flex;
  flex-direction: row;
  justify-content: center;
}
.change-day div{
  padding: 0 10px 0 10px;
}
table{
  width: 30%;
}
</style>